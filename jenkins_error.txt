Started by user marksog
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/lib/jenkins/workspace/flask-app-deployment
[Pipeline] {
[Pipeline] sh
+ grep -q ACTIVE
+ aws eks describe-cluster --name dev-devsecops-cluster --query cluster.status --output text
+ echo false
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Checkout)
[Pipeline] git
The recommended git tool is: NONE
using credential github-credentials
Cloning the remote Git repository
Cloning repository https://github.com/marksog/sample_flask_app.git
 > git init /var/lib/jenkins/workspace/flask-app-deployment # timeout=10
Fetching upstream changes from https://github.com/marksog/sample_flask_app.git
 > git --version # timeout=10
 > git --version # 'git version 2.34.1'
using GIT_ASKPASS to set credentials github-credentials
 > git fetch --tags --force --progress -- https://github.com/marksog/sample_flask_app.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/marksog/sample_flask_app.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
Avoid second fetch
 > git rev-parse refs/remotes/origin/main^{commit} # timeout=10
Checking out Revision ca69302341905d7b6278f746ff0ee0feeecf4868 (refs/remotes/origin/main)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f ca69302341905d7b6278f746ff0ee0feeecf4868 # timeout=10
 > git branch -a -v --no-abbrev # timeout=10
 > git checkout -b main ca69302341905d7b6278f746ff0ee0feeecf4868 # timeout=10
Commit message: "attempt to fix k8s connectivity"
First time build. Skipping changelog.
[Pipeline] script
[Pipeline] {
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Build Docker Image)
[Pipeline] script
[Pipeline] {
[Pipeline] isUnix
[Pipeline] withEnv
[Pipeline] {
[Pipeline] sh
+ docker build -t 148761635167.dkr.ecr.us-east-1.amazonaws.com/flask-test-app:1 --build-arg ENVIRONMENT=main ./app
DEPRECATED: The legacy builder is deprecated and will be removed in a future release.
            Install the buildx component to build images with BuildKit:
            https://docs.docker.com/go/buildx/

Sending build context to Docker daemon  9.728kB

Step 1/8 : FROM python:3.11-slim
3.11-slim: Pulling from library/python
3da95a905ed5: Pulling fs layer
483d0dd37518: Pulling fs layer
02a5d22e0d6f: Pulling fs layer
471797cdda8c: Pulling fs layer
471797cdda8c: Waiting
483d0dd37518: Verifying Checksum
483d0dd37518: Download complete
471797cdda8c: Verifying Checksum
471797cdda8c: Download complete
02a5d22e0d6f: Verifying Checksum
02a5d22e0d6f: Download complete
3da95a905ed5: Verifying Checksum
3da95a905ed5: Download complete
3da95a905ed5: Pull complete
483d0dd37518: Pull complete
02a5d22e0d6f: Pull complete
471797cdda8c: Pull complete
Digest: sha256:139020233cc412efe4c8135b0efe1c7569dc8b28ddd88bddb109b764f8977e30
Status: Downloaded newer image for python:3.11-slim
 ---> 0b14a859cdba
Step 2/8 : ENV PYTHONDONTWRITEBYTECODE=1     PYTHONUNBUFFERED=1
 ---> Running in 68cd51fc098c
 ---> Removed intermediate container 68cd51fc098c
 ---> 3b22afe5e1c3
Step 3/8 : WORKDIR /app
 ---> Running in 90a0fa2bfbaa
 ---> Removed intermediate container 90a0fa2bfbaa
 ---> 4a38b5b44238
Step 4/8 : COPY requirements.txt .
 ---> 2e3fe4df2d18
Step 5/8 : RUN pip install --no-cache-dir -r requirements.txt
 ---> Running in e669b9228f1c
Collecting Flask==3.0.0 (from -r requirements.txt (line 1))
  Downloading flask-3.0.0-py3-none-any.whl.metadata (3.6 kB)
Collecting prometheus-flask-exporter==0.22.4 (from -r requirements.txt (line 2))
  Downloading prometheus_flask_exporter-0.22.4-py3-none-any.whl.metadata (19 kB)
Collecting gunicorn==21.2.0 (from -r requirements.txt (line 3))
  Downloading gunicorn-21.2.0-py3-none-any.whl.metadata (4.1 kB)
Collecting Werkzeug>=3.0.0 (from Flask==3.0.0->-r requirements.txt (line 1))
  Downloading werkzeug-3.1.3-py3-none-any.whl.metadata (3.7 kB)
Collecting Jinja2>=3.1.2 (from Flask==3.0.0->-r requirements.txt (line 1))
  Downloading jinja2-3.1.6-py3-none-any.whl.metadata (2.9 kB)
Collecting itsdangerous>=2.1.2 (from Flask==3.0.0->-r requirements.txt (line 1))
  Downloading itsdangerous-2.2.0-py3-none-any.whl.metadata (1.9 kB)
Collecting click>=8.1.3 (from Flask==3.0.0->-r requirements.txt (line 1))
  Downloading click-8.2.1-py3-none-any.whl.metadata (2.5 kB)
Collecting blinker>=1.6.2 (from Flask==3.0.0->-r requirements.txt (line 1))
  Downloading blinker-1.9.0-py3-none-any.whl.metadata (1.6 kB)
Collecting prometheus-client (from prometheus-flask-exporter==0.22.4->-r requirements.txt (line 2))
  Downloading prometheus_client-0.22.1-py3-none-any.whl.metadata (1.9 kB)
Collecting packaging (from gunicorn==21.2.0->-r requirements.txt (line 3))
  Downloading packaging-25.0-py3-none-any.whl.metadata (3.3 kB)
Collecting MarkupSafe>=2.0 (from Jinja2>=3.1.2->Flask==3.0.0->-r requirements.txt (line 1))
  Downloading MarkupSafe-3.0.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.0 kB)
Downloading flask-3.0.0-py3-none-any.whl (99 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 99.7/99.7 kB 17.7 MB/s eta 0:00:00
Downloading prometheus_flask_exporter-0.22.4-py3-none-any.whl (18 kB)
Downloading gunicorn-21.2.0-py3-none-any.whl (80 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 80.2/80.2 kB 282.4 MB/s eta 0:00:00
Downloading blinker-1.9.0-py3-none-any.whl (8.5 kB)
Downloading click-8.2.1-py3-none-any.whl (102 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 102.2/102.2 kB 274.7 MB/s eta 0:00:00
Downloading itsdangerous-2.2.0-py3-none-any.whl (16 kB)
Downloading jinja2-3.1.6-py3-none-any.whl (134 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 134.9/134.9 kB 101.9 MB/s eta 0:00:00
Downloading werkzeug-3.1.3-py3-none-any.whl (224 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 224.5/224.5 kB 137.0 MB/s eta 0:00:00
Downloading packaging-25.0-py3-none-any.whl (66 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 66.5/66.5 kB 219.4 MB/s eta 0:00:00
Downloading prometheus_client-0.22.1-py3-none-any.whl (58 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 58.7/58.7 kB 219.9 MB/s eta 0:00:00
Downloading MarkupSafe-3.0.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (23 kB)
Installing collected packages: prometheus-client, packaging, MarkupSafe, itsdangerous, click, blinker, Werkzeug, Jinja2, gunicorn, Flask, prometheus-flask-exporter
Successfully installed Flask-3.0.0 Jinja2-3.1.6 MarkupSafe-3.0.2 Werkzeug-3.1.3 blinker-1.9.0 click-8.2.1 gunicorn-21.2.0 itsdangerous-2.2.0 packaging-25.0 prometheus-client-0.22.1 prometheus-flask-exporter-0.22.4
[91mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
[0m[91m
[notice] A new release of pip is available: 24.0 -> 25.1.1
[notice] To update, run: pip install --upgrade pip
[0m ---> Removed intermediate container e669b9228f1c
 ---> ef38ea361c9d
Step 6/8 : COPY . .
 ---> af09921faa76
Step 7/8 : EXPOSE 5001
 ---> Running in e9bd74f27af0
 ---> Removed intermediate container e9bd74f27af0
 ---> 61f88c9e1096
Step 8/8 : CMD ["gunicorn", "--bind", "0.0.0:5001", "wsgi:app", "--workers", "4"]
 ---> Running in 26eda5b20809
 ---> Removed intermediate container 26eda5b20809
 ---> d9221938b8e2
[Warning] One or more build-args [ENVIRONMENT] were not consumed
Successfully built d9221938b8e2
Successfully tagged 148761635167.dkr.ecr.us-east-1.amazonaws.com/flask-test-app:1
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Push to ECR)
[Pipeline] script
[Pipeline] {
[Pipeline] sh
+ aws ecr describe-repositories --repository-names flask-test-app
{
    "repositories": [
        {
            "repositoryArn": "arn:aws:ecr:us-east-1:148761635167:repository/flask-test-app",
            "registryId": "148761635167",
            "repositoryName": "flask-test-app",
            "repositoryUri": "148761635167.dkr.ecr.us-east-1.amazonaws.com/flask-test-app",
            "createdAt": "2025-06-10T17:10:46.631000+00:00",
            "imageTagMutability": "MUTABLE",
            "imageScanningConfiguration": {
                "scanOnPush": false
            },
            "encryptionConfiguration": {
                "encryptionType": "AES256"
            }
        }
    ]
}
[Pipeline] withAWS
Constructing AWS CredentialsSetting AWS region us-east-1 
 [Pipeline] {
[Pipeline] sh
+ aws ecr get-login-password
+ docker login --username AWS --password-stdin 148761635167.dkr.ecr.us-east-1.amazonaws.com
WARNING! Your password will be stored unencrypted in /var/lib/jenkins/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credential-stores

Login Succeeded
[Pipeline] sh
+ docker push 148761635167.dkr.ecr.us-east-1.amazonaws.com/flask-test-app:1
The push refers to repository [148761635167.dkr.ecr.us-east-1.amazonaws.com/flask-test-app]
8bbb69a7d76b: Preparing
c2f3a775a5d1: Preparing
b82f8fd35a95: Preparing
fe034745c624: Preparing
546c6f4e2f2c: Preparing
a1061f722fb2: Preparing
e5b65e4c6bda: Preparing
1bb35e8b4de1: Preparing
a1061f722fb2: Waiting
e5b65e4c6bda: Waiting
1bb35e8b4de1: Waiting
546c6f4e2f2c: Layer already exists
a1061f722fb2: Layer already exists
e5b65e4c6bda: Layer already exists
b82f8fd35a95: Pushed
fe034745c624: Pushed
8bbb69a7d76b: Pushed
c2f3a775a5d1: Pushed
1bb35e8b4de1: Pushed
1: digest: sha256:2a378eb0f629e88927798bceeda11ff922e27a8d96b07e4eb1f8cedd5183d0a2 size: 1991
[Pipeline] }
[Pipeline] // withAWS
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Deploy Infrastructure)
[Pipeline] dir
Running in /var/lib/jenkins/workspace/flask-app-deployment/infra
[Pipeline] {
[Pipeline] withAWS
Constructing AWS CredentialsSetting AWS region us-east-1 
 [Pipeline] {
[Pipeline] sh
+ terraform init
[0m[1mInitializing the backend...[0m
[0m[32m
Successfully configured the backend "s3"! Terraform will automatically
use this backend unless the backend configuration changes.[0m
[0m[1mInitializing modules...[0m
- bastion in modules/bastion
- eks in modules/eks
Downloading registry.terraform.io/terraform-aws-modules/eks/aws 20.37.1 for eks.eks...
- eks.eks in .terraform/modules/eks.eks
- eks.eks.eks_managed_node_group in .terraform/modules/eks.eks/modules/eks-managed-node-group
- eks.eks.eks_managed_node_group.user_data in .terraform/modules/eks.eks/modules/_user_data
- eks.eks.fargate_profile in .terraform/modules/eks.eks/modules/fargate-profile
Downloading registry.terraform.io/terraform-aws-modules/kms/aws 2.1.0 for eks.eks.kms...
- eks.eks.kms in .terraform/modules/eks.eks.kms
- eks.eks.self_managed_node_group in .terraform/modules/eks.eks/modules/self-managed-node-group
- eks.eks.self_managed_node_group.user_data in .terraform/modules/eks.eks/modules/_user_data
- jenkins in modules/jenkins
- network in modules/network
[0m[1mInitializing provider plugins...[0m
- Finding hashicorp/tls versions matching ">= 3.0.0"...
- Finding hashicorp/time versions matching ">= 0.9.0"...
- Finding hashicorp/null versions matching ">= 3.0.0"...
- Finding hashicorp/cloudinit versions matching ">= 2.0.0"...
- Finding latest version of hashicorp/http...
- Finding hashicorp/aws versions matching ">= 4.33.0, ~> 5.0, >= 5.95.0, < 6.0.0"...
- Installing hashicorp/tls v4.1.0...
- Installed hashicorp/tls v4.1.0 (signed by HashiCorp)
- Installing hashicorp/time v0.13.1...
- Installed hashicorp/time v0.13.1 (signed by HashiCorp)
- Installing hashicorp/null v3.2.4...
- Installed hashicorp/null v3.2.4 (signed by HashiCorp)
- Installing hashicorp/cloudinit v2.3.7...
- Installed hashicorp/cloudinit v2.3.7 (signed by HashiCorp)
- Installing hashicorp/http v3.5.0...
- Installed hashicorp/http v3.5.0 (signed by HashiCorp)
- Installing hashicorp/aws v5.100.0...
- Installed hashicorp/aws v5.100.0 (signed by HashiCorp)
Terraform has created a lock file [1m.terraform.lock.hcl[0m to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.[0m

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
+ terraform import module.jenkins.aws_security_group.jenkins sg-0db5c9b4064798dcd
[0m[1mmodule.eks.module.eks.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.module.kms.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mmodule.bastion.data.aws_ami.amazon_linux: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.module.kms.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.network.data.aws_availability_zones.available: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks.data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2830595799][0m
[0m[1mmodule.eks.module.eks.module.kms.data.aws_caller_identity.current[0]: Read complete after 0s [id=148761635167][0m
[0m[1mmodule.eks.module.eks.module.kms.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks.data.aws_caller_identity.current[0]: Read complete after 0s [id=148761635167][0m
[0m[1mmodule.eks.module.eks.data.aws_iam_policy_document.custom[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_iam_session_context.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_iam_session_context.current[0]: Read complete after 0s [id=arn:aws:iam::148761635167:user/webadmin][0m
[0m[1mmodule.eks.module.eks.data.aws_iam_policy_document.custom[0]: Read complete after 0s [id=513122117][0m
[0m[1mmodule.network.data.aws_availability_zones.available: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.jenkins.data.aws_ami.ubuntu: Reading...[0m[0m
[0m[1mmodule.jenkins.aws_security_group.jenkins: Importing from ID "sg-0db5c9b4064798dcd"...[0m
[0m[1mmodule.jenkins.data.http.my_ip: Reading...[0m[0m
[0m[1mmodule.jenkins.data.aws_ami.amazon_linux_2: Reading...[0m[0m
[0m[1m[32mmodule.jenkins.aws_security_group.jenkins: Import prepared![0m
[0m[32m  Prepared aws_security_group for import[0m
[0m[1mmodule.jenkins.data.http.my_ip: Read complete after 0s [id=http://checkip.amazonaws.com/][0m
[0m[1mmodule.jenkins.data.aws_ami.ubuntu: Read complete after 0s [id=ami-09ac0b140f63d3458][0m
[0m[1mmodule.bastion.data.aws_ami.amazon_linux: Read complete after 0s [id=ami-0871b7e0b83ae16c4][0m
[0m[1mmodule.jenkins.data.aws_ami.amazon_linux_2: Read complete after 0s [id=ami-01dd5f7dda5e8bb39][0m
[31m[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mResource already managed by Terraform[0m
[31m│[0m [0m
[31m│[0m [0m[0mTerraform is already managing a remote object for
[31m│[0m [0mmodule.jenkins.aws_security_group.jenkins. To import to this address you
[31m│[0m [0mmust first remove the existing object from the state.
[31m╵[0m[0m
[0m[0m
+ true
+ terraform import module.jenkins.aws_iam_role.jenkins dev-jenkins-role
[0m[1mmodule.eks.module.eks.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.module.kms.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mmodule.bastion.data.aws_ami.amazon_linux: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.module.kms.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mmodule.network.data.aws_availability_zones.available: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_caller_identity.current[0]: Read complete after 0s [id=148761635167][0m
[0m[1mmodule.eks.module.eks.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks.data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2830595799][0m
[0m[1mmodule.eks.module.eks.module.kms.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks.module.kms.data.aws_caller_identity.current[0]: Read complete after 0s [id=148761635167][0m
[0m[1mmodule.eks.module.eks.data.aws_iam_session_context.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_iam_session_context.current[0]: Read complete after 0s [id=arn:aws:iam::148761635167:user/webadmin][0m
[0m[1mmodule.eks.module.eks.data.aws_iam_policy_document.custom[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_iam_policy_document.custom[0]: Read complete after 0s [id=513122117][0m
[0m[1mmodule.network.data.aws_availability_zones.available: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.jenkins.aws_iam_role.jenkins: Importing from ID "dev-jenkins-role"...[0m
[0m[1mmodule.jenkins.data.http.my_ip: Reading...[0m[0m
[0m[1m[32mmodule.jenkins.aws_iam_role.jenkins: Import prepared![0m
[0m[32m  Prepared aws_iam_role for import[0m
[0m[1mmodule.jenkins.data.aws_ami.amazon_linux_2: Reading...[0m[0m
[0m[1mmodule.jenkins.data.aws_ami.ubuntu: Reading...[0m[0m
[0m[1mmodule.jenkins.data.http.my_ip: Read complete after 0s [id=http://checkip.amazonaws.com/][0m
[0m[1mmodule.bastion.data.aws_ami.amazon_linux: Read complete after 1s [id=ami-0871b7e0b83ae16c4][0m
[0m[1mmodule.jenkins.data.aws_ami.ubuntu: Read complete after 0s [id=ami-09ac0b140f63d3458][0m
[0m[1mmodule.jenkins.data.aws_ami.amazon_linux_2: Read complete after 0s [id=ami-01dd5f7dda5e8bb39][0m
[31m[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mResource already managed by Terraform[0m
[31m│[0m [0m
[31m│[0m [0m[0mTerraform is already managing a remote object for
[31m│[0m [0mmodule.jenkins.aws_iam_role.jenkins. To import to this address you must
[31m│[0m [0mfirst remove the existing object from the state.
[31m╵[0m[0m
[0m[0m
+ true
+ terraform plan
[0m[1mmodule.bastion.aws_iam_role.bastion: Refreshing state... [id=dev-bastion-role][0m
[0m[1mmodule.network.data.aws_availability_zones.available: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.module.kms.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mmodule.network.aws_vpc.main: Refreshing state... [id=vpc-0475da6c0045face1][0m
[0m[1mmodule.eks.module.eks.data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.bastion.data.aws_ami.amazon_linux: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks.data.aws_caller_identity.current[0]: Read complete after 0s [id=148761635167][0m
[0m[1mmodule.eks.module.eks.data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2830595799][0m
[0m[1mmodule.eks.module.eks.module.kms.data.aws_caller_identity.current[0]: Read complete after 0s [id=148761635167][0m
[0m[1mmodule.eks.module.eks.module.kms.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_iam_session_context.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.module.kms.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks.data.aws_iam_session_context.current[0]: Read complete after 0s [id=arn:aws:iam::148761635167:user/webadmin][0m
[0m[1mmodule.eks.module.eks.data.aws_iam_policy_document.custom[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_iam_policy_document.custom[0]: Read complete after 0s [id=513122117][0m
[0m[1mmodule.network.data.aws_availability_zones.available: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.bastion.aws_iam_role_policy_attachment.bastion_eks: Refreshing state... [id=dev-bastion-role-20250717011205014900000003][0m
[0m[1mmodule.bastion.aws_iam_instance_profile.bastion: Refreshing state... [id=dev-bastion-profile][0m
[0m[1mmodule.bastion.data.aws_ami.amazon_linux: Read complete after 0s [id=ami-0871b7e0b83ae16c4][0m
[0m[1mmodule.network.aws_subnet.public_subnets[1]: Refreshing state... [id=subnet-00d4239330c180d57][0m
[0m[1mmodule.network.aws_subnet.public_subnets[0]: Refreshing state... [id=subnet-02daa126407b94eff][0m
[0m[1mmodule.network.aws_subnet.private_subnets[1]: Refreshing state... [id=subnet-09d1c1b3093f18a0c][0m
[0m[1mmodule.network.aws_internet_gateway.igw: Refreshing state... [id=igw-076740c2cc061231b][0m
[0m[1mmodule.network.aws_subnet.private_subnets[0]: Refreshing state... [id=subnet-09b918113ef119930][0m
[0m[1mmodule.bastion.aws_security_group.bastion_sg: Refreshing state... [id=sg-0251c8d0286d33ec4][0m
[0m[1mmodule.network.aws_eip.nat[0]: Refreshing state... [id=eipalloc-0af79af1c685be877][0m
[0m[1mmodule.network.aws_eip.nat[1]: Refreshing state... [id=eipalloc-02b7bc655aa95eb1c][0m
[0m[1mmodule.network.aws_route_table.public: Refreshing state... [id=rtb-07f2f6288f79178bf][0m
[0m[1mmodule.bastion.aws_instance.bastion: Refreshing state... [id=i-083d0c8b1e2e60881][0m
[0m[1mmodule.network.aws_route_table_association.public[1]: Refreshing state... [id=rtbassoc-0e9f6245caeac42a5][0m
[0m[1mmodule.network.aws_route_table_association.public[0]: Refreshing state... [id=rtbassoc-0bd0bb97d5cd5e131][0m
[0m[1mmodule.network.aws_nat_gateway.nat[1]: Refreshing state... [id=nat-06be98881467a1591][0m
[0m[1mmodule.network.aws_nat_gateway.nat[0]: Refreshing state... [id=nat-038d25eb0497612a8][0m
[0m[1mmodule.network.aws_route_table.private[1]: Refreshing state... [id=rtb-00b3bbb6c21e0a13c][0m
[0m[1mmodule.network.aws_route_table.private[0]: Refreshing state... [id=rtb-0b24feadaae1e5f74][0m
[0m[1mmodule.network.aws_route_table_association.private[0]: Refreshing state... [id=rtbassoc-096dd1e10a6438cc9][0m
[0m[1mmodule.network.aws_route_table_association.private[1]: Refreshing state... [id=rtbassoc-053ecf6d6efff0d42][0m
[0m[1mmodule.jenkins.data.aws_ami.ubuntu: Reading...[0m[0m
[0m[1mmodule.jenkins.data.http.my_ip: Reading...[0m[0m
[0m[1mmodule.jenkins.aws_iam_role.jenkins: Refreshing state... [id=dev-jenkins-role][0m
[0m[1mmodule.jenkins.data.aws_ami.amazon_linux_2: Reading...[0m[0m
[0m[1mmodule.jenkins.aws_security_group.alb: Refreshing state... [id=sg-00f39de268e6cbd65][0m
[0m[1mmodule.jenkins.data.http.my_ip: Read complete after 0s [id=http://checkip.amazonaws.com/][0m
[0m[1mmodule.jenkins.aws_lb_target_group.jenkins_target_group: Refreshing state... [id=arn:aws:elasticloadbalancing:us-east-1:148761635167:targetgroup/jenkins-tg-dev/b5032410766d5241][0m
[0m[1mmodule.jenkins.aws_lb.jenkins_alb: Refreshing state... [id=arn:aws:elasticloadbalancing:us-east-1:148761635167:loadbalancer/app/jenkins-alb-dev/66d77f10228a4a7c][0m
[0m[1mmodule.jenkins.aws_security_group.jenkins: Refreshing state... [id=sg-0db5c9b4064798dcd][0m
[0m[1mmodule.jenkins.aws_iam_instance_profile.jenkins: Refreshing state... [id=dev-jenkins-profile][0m
[0m[1mmodule.jenkins.aws_iam_role_policy_attachment.jenkins_ecr: Refreshing state... [id=dev-jenkins-role-20250717011205021000000004][0m
[0m[1mmodule.jenkins.aws_iam_role_policy.jenkins_custom: Refreshing state... [id=dev-jenkins-role:dev-jenkins-custom-policy][0m
[0m[1mmodule.jenkins.aws_iam_role_policy_attachment.jenkins_eks: Refreshing state... [id=dev-jenkins-role-20250717011204941900000002][0m
[0m[1mmodule.jenkins.aws_iam_role_policy_attachment.jenkins_ssm: Refreshing state... [id=dev-jenkins-role-20250717011204920400000001][0m
[0m[1mmodule.jenkins.data.aws_ami.ubuntu: Read complete after 0s [id=ami-09ac0b140f63d3458][0m
[0m[1mmodule.jenkins.data.aws_ami.amazon_linux_2: Read complete after 1s [id=ami-01dd5f7dda5e8bb39][0m
[0m[1mmodule.jenkins.aws_lb_listener.jenkins_listener: Refreshing state... [id=arn:aws:elasticloadbalancing:us-east-1:148761635167:listener/app/jenkins-alb-dev/66d77f10228a4a7c/3d71667ce5ff66ee][0m
[0m[1mmodule.jenkins.aws_instance.jenkins: Refreshing state... [id=i-0a0789473e56e0182][0m
[0m[1mmodule.jenkins.aws_lb_target_group_attachment.jenkins_attachment: Refreshing state... [id=arn:aws:elasticloadbalancing:us-east-1:148761635167:targetgroup/jenkins-tg-dev/b5032410766d5241-20250717011224912000000007][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # aws_security_group_rule.allow_jenkins_to_eks[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "allow_jenkins_to_eks" {
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = "sg-0db5c9b4064798dcd"
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # aws_security_group_rule.allow_vpc_endpoint_jenkins[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "allow_vpc_endpoint_jenkins" {
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = "sg-0db5c9b4064798dcd"
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = "sg-0db5c9b4064798dcd"
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # aws_security_group_rule.jenkins_to_eks[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "jenkins_to_eks" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "10.1.0.0/16",
        ]
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = "sg-0db5c9b4064798dcd"
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "egress"
    }

[1m  # aws_vpc_endpoint.ec2[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "ec2" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address_type       = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = (known after apply)
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = [
          [32m+[0m[0m "sg-0db5c9b4064798dcd",
        ]
      [32m+[0m[0m service_name          = "com.amazonaws.us-east-1.ec2"
      [32m+[0m[0m service_region        = (known after apply)
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = [
          [32m+[0m[0m "subnet-09b918113ef119930",
          [32m+[0m[0m "subnet-09d1c1b3093f18a0c",
        ]
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m vpc_endpoint_type     = "Interface"
      [32m+[0m[0m vpc_id                = "vpc-0475da6c0045face1"

      [32m+[0m[0m dns_options (known after apply)

      [32m+[0m[0m subnet_configuration (known after apply)
    }

[1m  # aws_vpc_endpoint.eks[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "eks" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address_type       = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = true
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = [
          [32m+[0m[0m "sg-0db5c9b4064798dcd",
        ]
      [32m+[0m[0m service_name          = "com.amazonaws.us-east-1.eks"
      [32m+[0m[0m service_region        = (known after apply)
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = [
          [32m+[0m[0m "subnet-09b918113ef119930",
          [32m+[0m[0m "subnet-09d1c1b3093f18a0c",
        ]
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m vpc_endpoint_type     = "Interface"
      [32m+[0m[0m vpc_id                = "vpc-0475da6c0045face1"

      [32m+[0m[0m dns_options (known after apply)

      [32m+[0m[0m subnet_configuration (known after apply)
    }

[1m  # aws_vpc_endpoint.sts[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "sts" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address_type       = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = (known after apply)
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = [
          [32m+[0m[0m "sg-0db5c9b4064798dcd",
        ]
      [32m+[0m[0m service_name          = "com.amazonaws.us-east-1.sts"
      [32m+[0m[0m service_region        = (known after apply)
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = [
          [32m+[0m[0m "subnet-09b918113ef119930",
          [32m+[0m[0m "subnet-09d1c1b3093f18a0c",
        ]
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m vpc_endpoint_type     = "Interface"
      [32m+[0m[0m vpc_id                = "vpc-0475da6c0045face1"

      [32m+[0m[0m dns_options (known after apply)

      [32m+[0m[0m subnet_configuration (known after apply)
    }

[1m  # module.eks.aws_eks_node_group.private_node_group[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "private_node_group" {
      [32m+[0m[0m ami_type               = "AL2_x86_64"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "ON_DEMAND"
      [32m+[0m[0m cluster_name           = "dev-devsecops-cluster"
      [32m+[0m[0m disk_size              = 20
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t3.medium",
        ]
      [32m+[0m[0m labels                 = {
          [32m+[0m[0m "environment" = "dev"
          [32m+[0m[0m "nodegroup"   = "private"
        }
      [32m+[0m[0m node_group_name        = "dev-private-node-group"
      [32m+[0m[0m node_group_name_prefix = (known after apply)
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = [
          [32m+[0m[0m "subnet-09b918113ef119930",
          [32m+[0m[0m "subnet-09d1c1b3093f18a0c",
        ]
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version                = (known after apply)

      [32m+[0m[0m node_repair_config (known after apply)

      [32m+[0m[0m remote_access {
          [32m+[0m[0m ec2_ssh_key = "jenkins_server"
        }

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 1
          [32m+[0m[0m max_size     = 3
          [32m+[0m[0m min_size     = 1
        }

      [32m+[0m[0m update_config (known after apply)
    }

[1m  # module.eks.aws_eks_node_group.public_node_group[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "public_node_group" {
      [32m+[0m[0m ami_type               = "AL2_x86_64"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "ON_DEMAND"
      [32m+[0m[0m cluster_name           = "dev-devsecops-cluster"
      [32m+[0m[0m disk_size              = 20
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t3.medium",
        ]
      [32m+[0m[0m labels                 = {
          [32m+[0m[0m "environment" = "dev"
          [32m+[0m[0m "nodegroup"   = "public"
        }
      [32m+[0m[0m node_group_name        = "dev-public-node-group"
      [32m+[0m[0m node_group_name_prefix = (known after apply)
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = [
          [32m+[0m[0m "subnet-00d4239330c180d57",
          [32m+[0m[0m "subnet-02daa126407b94eff",
        ]
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version                = (known after apply)

      [32m+[0m[0m node_repair_config (known after apply)

      [32m+[0m[0m remote_access {
          [32m+[0m[0m ec2_ssh_key = "jenkins_server"
        }

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 2
          [32m+[0m[0m max_size     = 5
          [32m+[0m[0m min_size     = 1
        }

      [32m+[0m[0m taint {
          [32m+[0m[0m effect = "NO_SCHEDULE"
          [32m+[0m[0m key    = "public"
          [32m+[0m[0m value  = "true"
        }

      [32m+[0m[0m update_config (known after apply)
    }

[1m  # module.eks.aws_iam_role.nodes[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "nodes" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "dev-eks-node-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name" = "dev-eks-node-role"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name" = "dev-eks-node-role"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.nodes_AmazonEC2ContainerRegistryReadOnly[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "nodes_AmazonEC2ContainerRegistryReadOnly" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = "dev-eks-node-role"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.nodes_AmazonEKSWorkerNodePolicy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "nodes_AmazonEKSWorkerNodePolicy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = "dev-eks-node-role"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.nodes_AmazonEKS_CNI_Policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "nodes_AmazonEKS_CNI_Policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = "dev-eks-node-role"
    }

[1m  # module.eks.aws_security_group.eks_cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "eks_cluster" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for EKS cluster"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "Allow inbound traffic"
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m name                   = "dev-eks-cluster-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "dev-eks-cluster-sg"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "dev-eks-cluster-sg"
        }
      [32m+[0m[0m vpc_id                 = "vpc-0475da6c0045face1"
    }

[1m  # module.eks.module.eks.data.tls_certificate.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "tls_certificate" "this" {
      [32m+[0m[0m certificates = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m url          = (known after apply)
    }

[1m  # module.eks.module.eks.aws_cloudwatch_log_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/eks/dev-devsecops-cluster/cluster"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 90
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Name" = "/aws/eks/dev-devsecops-cluster/cluster"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Name" = "/aws/eks/dev-devsecops-cluster/cluster"
        }
    }

[1m  # module.eks.module.eks.aws_eks_cluster.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "this" {
      [32m+[0m[0m arn                           = (known after apply)
      [32m+[0m[0m bootstrap_self_managed_addons = true
      [32m+[0m[0m certificate_authority         = (known after apply)
      [32m+[0m[0m cluster_id                    = (known after apply)
      [32m+[0m[0m created_at                    = (known after apply)
      [32m+[0m[0m enabled_cluster_log_types     = [
          [32m+[0m[0m "api",
          [32m+[0m[0m "audit",
          [32m+[0m[0m "authenticator",
        ]
      [32m+[0m[0m endpoint                      = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m identity                      = (known after apply)
      [32m+[0m[0m name                          = "dev-devsecops-cluster"
      [32m+[0m[0m platform_version              = (known after apply)
      [32m+[0m[0m role_arn                      = (known after apply)
      [32m+[0m[0m status                        = (known after apply)
      [32m+[0m[0m tags                          = {
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m tags_all                      = {
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m version                       = "1.28"

      [32m+[0m[0m access_config {
          [32m+[0m[0m authentication_mode                         = "API_AND_CONFIG_MAP"
          [32m+[0m[0m bootstrap_cluster_creator_admin_permissions = false
        }

      [32m+[0m[0m encryption_config {
          [32m+[0m[0m resources = [
              [32m+[0m[0m "secrets",
            ]

          [32m+[0m[0m provider {
              [32m+[0m[0m key_arn = (known after apply)
            }
        }

      [32m+[0m[0m kubernetes_network_config {
          [32m+[0m[0m ip_family         = "ipv4"
          [32m+[0m[0m service_ipv4_cidr = (known after apply)
          [32m+[0m[0m service_ipv6_cidr = (known after apply)

          [32m+[0m[0m elastic_load_balancing (known after apply)
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m upgrade_policy (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = true
          [32m+[0m[0m endpoint_public_access    = false
          [32m+[0m[0m public_access_cidrs       = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m security_group_ids        = (known after apply)
          [32m+[0m[0m subnet_ids                = [
              [32m+[0m[0m "subnet-00d4239330c180d57",
              [32m+[0m[0m "subnet-02daa126407b94eff",
              [32m+[0m[0m "subnet-09b918113ef119930",
              [32m+[0m[0m "subnet-09d1c1b3093f18a0c",
            ]
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # module.eks.module.eks.aws_iam_openid_connect_provider.oidc_provider[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_openid_connect_provider" "oidc_provider" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m client_id_list  = [
          [32m+[0m[0m "sts.amazonaws.com",
        ]
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m tags            = {
          [32m+[0m[0m "Name" = "dev-devsecops-cluster-eks-irsa"
        }
      [32m+[0m[0m tags_all        = {
          [32m+[0m[0m "Name" = "dev-devsecops-cluster-eks-irsa"
        }
      [32m+[0m[0m thumbprint_list = (known after apply)
      [32m+[0m[0m url             = (known after apply)
    }

[1m  # module.eks.module.eks.aws_iam_policy.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "cluster_encryption" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Cluster encryption policy to allow cluster role to utilize CMK provided"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = "dev-devsecops-cluster-cluster-ClusterEncryption"
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.eks.module.eks.aws_iam_policy.custom[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "custom" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = "dev-devsecops-cluster-cluster-"
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:RunInstances",
                          [32m+[0m[0m "ec2:CreateLaunchTemplate",
                          [32m+[0m[0m "ec2:CreateFleet",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                          [32m+[0m[0m StringLike   = {
                              [32m+[0m[0m "aws:RequestTag/eks:kubernetes-node-class-name" = "*"
                              [32m+[0m[0m "aws:RequestTag/eks:kubernetes-node-pool-name"  = "*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "Compute"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:CreateVolume",
                          [32m+[0m[0m "ec2:CreateSnapshot",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "arn:aws:ec2:*:*:volume/*",
                          [32m+[0m[0m "arn:aws:ec2:*:*:snapshot/*",
                        ]
                      [32m+[0m[0m Sid       = "Storage"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:CreateNetworkInterface"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name"         = "${aws:PrincipalTag/eks:eks-cluster-name}"
                              [32m+[0m[0m "aws:RequestTag/eks:kubernetes-cni-node-name" = "*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "Networking"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:CreateTargetGroup",
                          [32m+[0m[0m "elasticloadbalancing:CreateRule",
                          [32m+[0m[0m "elasticloadbalancing:CreateLoadBalancer",
                          [32m+[0m[0m "elasticloadbalancing:CreateListener",
                          [32m+[0m[0m "ec2:CreateSecurityGroup",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "LoadBalancer"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "shield:CreateProtection"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "ShieldProtection"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "shield:TagResource"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "arn:aws:shield::*:protection/*"
                      [32m+[0m[0m Sid       = "ShieldTagResource"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.eks.module.eks.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:TagSession",
                          [32m+[0m[0m "sts:AssumeRole",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSClusterAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "dev-devsecops-cluster-cluster-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.module.eks.aws_iam_role_policy_attachment.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_encryption" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks.aws_iam_role_policy_attachment.custom[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "custom" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks.aws_security_group.cluster[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "cluster" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS cluster security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "dev-devsecops-cluster-cluster-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "dev-devsecops-cluster-cluster"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "dev-devsecops-cluster-cluster"
        }
      [32m+[0m[0m vpc_id                 = "vpc-0475da6c0045face1"
    }

[1m  # module.eks.module.eks.aws_security_group.node[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "node" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS node shared security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "dev-devsecops-cluster-node-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"                                        = "dev-devsecops-cluster-node"
          [32m+[0m[0m "kubernetes.io/cluster/dev-devsecops-cluster" = "owned"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"                                        = "dev-devsecops-cluster-node"
          [32m+[0m[0m "kubernetes.io/cluster/dev-devsecops-cluster" = "owned"
        }
      [32m+[0m[0m vpc_id                 = "vpc-0475da6c0045face1"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.cluster["ingress_nodes_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "cluster" {
      [32m+[0m[0m description              = "Node groups to cluster API"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["egress_all"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "Allow all egress"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["ingress_cluster_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node groups"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 4443/tcp webhook"
      [32m+[0m[0m from_port                = 4443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 4443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 6443/tcp webhook"
      [32m+[0m[0m from_port                = 6443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 6443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 8443/tcp webhook"
      [32m+[0m[0m from_port                = 8443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 8443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 9443/tcp webhook"
      [32m+[0m[0m from_port                = 9443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 9443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node kubelets"
      [32m+[0m[0m from_port                = 10250
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 10250
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node ingress on ephemeral ports"
      [32m+[0m[0m from_port                = 1025
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 65535
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS UDP"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "udp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.time_sleep.this[0][0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "this" {
      [32m+[0m[0m create_duration = "30s"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m triggers        = {
          [32m+[0m[0m "cluster_certificate_authority_data" = (known after apply)
          [32m+[0m[0m "cluster_endpoint"                   = (known after apply)
          [32m+[0m[0m "cluster_name"                       = (known after apply)
          [32m+[0m[0m "cluster_service_cidr"               = (known after apply)
          [32m+[0m[0m "cluster_version"                    = "1.28"
        }
    }

[1m  # module.eks.module.eks.module.kms.data.aws_iam_policy_document.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this" {
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m json                      = (known after apply)
      [32m+[0m[0m minified_json             = (known after apply)
      [32m+[0m[0m override_policy_documents = []
      [32m+[0m[0m source_policy_documents   = []

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "Default"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::148761635167:root",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:CancelKeyDeletion",
              [32m+[0m[0m "kms:Create*",
              [32m+[0m[0m "kms:Delete*",
              [32m+[0m[0m "kms:Describe*",
              [32m+[0m[0m "kms:Disable*",
              [32m+[0m[0m "kms:Enable*",
              [32m+[0m[0m "kms:Get*",
              [32m+[0m[0m "kms:ImportKeyMaterial",
              [32m+[0m[0m "kms:List*",
              [32m+[0m[0m "kms:Put*",
              [32m+[0m[0m "kms:ReplicateKey",
              [32m+[0m[0m "kms:Revoke*",
              [32m+[0m[0m "kms:ScheduleKeyDeletion",
              [32m+[0m[0m "kms:TagResource",
              [32m+[0m[0m "kms:UntagResource",
              [32m+[0m[0m "kms:Update*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyAdministration"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::148761635167:user/webadmin",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:Decrypt",
              [32m+[0m[0m "kms:DescribeKey",
              [32m+[0m[0m "kms:Encrypt",
              [32m+[0m[0m "kms:GenerateDataKey*",
              [32m+[0m[0m "kms:ReEncrypt*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyUsage"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
    }

[1m  # module.eks.module.eks.module.kms.aws_kms_alias.this["cluster"][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/eks/dev-devsecops-cluster"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.eks.module.eks.module.kms.aws_kms_key.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "this" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m description                        = "dev-devsecops-cluster cluster encryption key"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = false
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m rotation_period_in_days            = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
    }

[1mPlan:[0m 39 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m eks_cluster_name = "devsecops-cluster"
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
+ terraform apply -auto-approve
[0m[1mmodule.eks.module.eks.module.kms.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mmodule.network.aws_vpc.main: Refreshing state... [id=vpc-0475da6c0045face1][0m
[0m[1mmodule.bastion.data.aws_ami.amazon_linux: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.module.kms.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mmodule.bastion.aws_iam_role.bastion: Refreshing state... [id=dev-bastion-role][0m
[0m[1mmodule.network.data.aws_availability_zones.available: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks.data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2830595799][0m
[0m[1mmodule.eks.module.eks.module.kms.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.module.kms.data.aws_caller_identity.current[0]: Read complete after 0s [id=148761635167][0m
[0m[1mmodule.eks.module.eks.data.aws_caller_identity.current[0]: Read complete after 0s [id=148761635167][0m
[0m[1mmodule.eks.module.eks.data.aws_iam_session_context.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_iam_session_context.current[0]: Read complete after 0s [id=arn:aws:iam::148761635167:user/webadmin][0m
[0m[1mmodule.eks.module.eks.data.aws_iam_policy_document.custom[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.data.aws_iam_policy_document.custom[0]: Read complete after 0s [id=513122117][0m
[0m[1mmodule.network.data.aws_availability_zones.available: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.bastion.aws_iam_role_policy_attachment.bastion_eks: Refreshing state... [id=dev-bastion-role-20250717011205014900000003][0m
[0m[1mmodule.bastion.aws_iam_instance_profile.bastion: Refreshing state... [id=dev-bastion-profile][0m
[0m[1mmodule.bastion.data.aws_ami.amazon_linux: Read complete after 0s [id=ami-0871b7e0b83ae16c4][0m
[0m[1mmodule.network.aws_subnet.private_subnets[1]: Refreshing state... [id=subnet-09d1c1b3093f18a0c][0m
[0m[1mmodule.network.aws_internet_gateway.igw: Refreshing state... [id=igw-076740c2cc061231b][0m
[0m[1mmodule.network.aws_subnet.private_subnets[0]: Refreshing state... [id=subnet-09b918113ef119930][0m
[0m[1mmodule.bastion.aws_security_group.bastion_sg: Refreshing state... [id=sg-0251c8d0286d33ec4][0m
[0m[1mmodule.network.aws_subnet.public_subnets[0]: Refreshing state... [id=subnet-02daa126407b94eff][0m
[0m[1mmodule.network.aws_subnet.public_subnets[1]: Refreshing state... [id=subnet-00d4239330c180d57][0m
[0m[1mmodule.network.aws_route_table.public: Refreshing state... [id=rtb-07f2f6288f79178bf][0m
[0m[1mmodule.bastion.aws_instance.bastion: Refreshing state... [id=i-083d0c8b1e2e60881][0m
[0m[1mmodule.network.aws_eip.nat[1]: Refreshing state... [id=eipalloc-02b7bc655aa95eb1c][0m
[0m[1mmodule.network.aws_eip.nat[0]: Refreshing state... [id=eipalloc-0af79af1c685be877][0m
[0m[1mmodule.network.aws_route_table_association.public[1]: Refreshing state... [id=rtbassoc-0e9f6245caeac42a5][0m
[0m[1mmodule.network.aws_route_table_association.public[0]: Refreshing state... [id=rtbassoc-0bd0bb97d5cd5e131][0m
[0m[1mmodule.network.aws_nat_gateway.nat[0]: Refreshing state... [id=nat-038d25eb0497612a8][0m
[0m[1mmodule.network.aws_nat_gateway.nat[1]: Refreshing state... [id=nat-06be98881467a1591][0m
[0m[1mmodule.network.aws_route_table.private[0]: Refreshing state... [id=rtb-0b24feadaae1e5f74][0m
[0m[1mmodule.network.aws_route_table.private[1]: Refreshing state... [id=rtb-00b3bbb6c21e0a13c][0m
[0m[1mmodule.network.aws_route_table_association.private[0]: Refreshing state... [id=rtbassoc-096dd1e10a6438cc9][0m
[0m[1mmodule.network.aws_route_table_association.private[1]: Refreshing state... [id=rtbassoc-053ecf6d6efff0d42][0m
[0m[1mmodule.jenkins.data.http.my_ip: Reading...[0m[0m
[0m[1mmodule.jenkins.data.aws_ami.ubuntu: Reading...[0m[0m
[0m[1mmodule.jenkins.aws_security_group.alb: Refreshing state... [id=sg-00f39de268e6cbd65][0m
[0m[1mmodule.jenkins.data.aws_ami.amazon_linux_2: Reading...[0m[0m
[0m[1mmodule.jenkins.aws_iam_role.jenkins: Refreshing state... [id=dev-jenkins-role][0m
[0m[1mmodule.jenkins.aws_lb_target_group.jenkins_target_group: Refreshing state... [id=arn:aws:elasticloadbalancing:us-east-1:148761635167:targetgroup/jenkins-tg-dev/b5032410766d5241][0m
[0m[1mmodule.jenkins.data.http.my_ip: Read complete after 0s [id=http://checkip.amazonaws.com/][0m
[0m[1mmodule.jenkins.aws_lb.jenkins_alb: Refreshing state... [id=arn:aws:elasticloadbalancing:us-east-1:148761635167:loadbalancer/app/jenkins-alb-dev/66d77f10228a4a7c][0m
[0m[1mmodule.jenkins.aws_security_group.jenkins: Refreshing state... [id=sg-0db5c9b4064798dcd][0m
[0m[1mmodule.jenkins.data.aws_ami.ubuntu: Read complete after 0s [id=ami-09ac0b140f63d3458][0m
[0m[1mmodule.jenkins.aws_iam_role_policy_attachment.jenkins_eks: Refreshing state... [id=dev-jenkins-role-20250717011204941900000002][0m
[0m[1mmodule.jenkins.aws_iam_instance_profile.jenkins: Refreshing state... [id=dev-jenkins-profile][0m
[0m[1mmodule.jenkins.aws_iam_role_policy_attachment.jenkins_ssm: Refreshing state... [id=dev-jenkins-role-20250717011204920400000001][0m
[0m[1mmodule.jenkins.aws_iam_role_policy_attachment.jenkins_ecr: Refreshing state... [id=dev-jenkins-role-20250717011205021000000004][0m
[0m[1mmodule.jenkins.aws_iam_role_policy.jenkins_custom: Refreshing state... [id=dev-jenkins-role:dev-jenkins-custom-policy][0m
[0m[1mmodule.jenkins.data.aws_ami.amazon_linux_2: Read complete after 0s [id=ami-01dd5f7dda5e8bb39][0m
[0m[1mmodule.jenkins.aws_lb_listener.jenkins_listener: Refreshing state... [id=arn:aws:elasticloadbalancing:us-east-1:148761635167:listener/app/jenkins-alb-dev/66d77f10228a4a7c/3d71667ce5ff66ee][0m
[0m[1mmodule.jenkins.aws_instance.jenkins: Refreshing state... [id=i-0a0789473e56e0182][0m
[0m[1mmodule.jenkins.aws_lb_target_group_attachment.jenkins_attachment: Refreshing state... [id=arn:aws:elasticloadbalancing:us-east-1:148761635167:targetgroup/jenkins-tg-dev/b5032410766d5241-20250717011224912000000007][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # aws_security_group_rule.allow_jenkins_to_eks[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "allow_jenkins_to_eks" {
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = "sg-0db5c9b4064798dcd"
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # aws_security_group_rule.allow_vpc_endpoint_jenkins[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "allow_vpc_endpoint_jenkins" {
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = "sg-0db5c9b4064798dcd"
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = "sg-0db5c9b4064798dcd"
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # aws_security_group_rule.jenkins_to_eks[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "jenkins_to_eks" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "10.1.0.0/16",
        ]
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = "sg-0db5c9b4064798dcd"
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "egress"
    }

[1m  # aws_vpc_endpoint.ec2[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "ec2" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address_type       = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = (known after apply)
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = [
          [32m+[0m[0m "sg-0db5c9b4064798dcd",
        ]
      [32m+[0m[0m service_name          = "com.amazonaws.us-east-1.ec2"
      [32m+[0m[0m service_region        = (known after apply)
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = [
          [32m+[0m[0m "subnet-09b918113ef119930",
          [32m+[0m[0m "subnet-09d1c1b3093f18a0c",
        ]
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m vpc_endpoint_type     = "Interface"
      [32m+[0m[0m vpc_id                = "vpc-0475da6c0045face1"

      [32m+[0m[0m dns_options (known after apply)

      [32m+[0m[0m subnet_configuration (known after apply)
    }

[1m  # aws_vpc_endpoint.eks[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "eks" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address_type       = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = true
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = [
          [32m+[0m[0m "sg-0db5c9b4064798dcd",
        ]
      [32m+[0m[0m service_name          = "com.amazonaws.us-east-1.eks"
      [32m+[0m[0m service_region        = (known after apply)
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = [
          [32m+[0m[0m "subnet-09b918113ef119930",
          [32m+[0m[0m "subnet-09d1c1b3093f18a0c",
        ]
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m vpc_endpoint_type     = "Interface"
      [32m+[0m[0m vpc_id                = "vpc-0475da6c0045face1"

      [32m+[0m[0m dns_options (known after apply)

      [32m+[0m[0m subnet_configuration (known after apply)
    }

[1m  # aws_vpc_endpoint.sts[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "sts" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address_type       = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = (known after apply)
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = [
          [32m+[0m[0m "sg-0db5c9b4064798dcd",
        ]
      [32m+[0m[0m service_name          = "com.amazonaws.us-east-1.sts"
      [32m+[0m[0m service_region        = (known after apply)
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = [
          [32m+[0m[0m "subnet-09b918113ef119930",
          [32m+[0m[0m "subnet-09d1c1b3093f18a0c",
        ]
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m vpc_endpoint_type     = "Interface"
      [32m+[0m[0m vpc_id                = "vpc-0475da6c0045face1"

      [32m+[0m[0m dns_options (known after apply)

      [32m+[0m[0m subnet_configuration (known after apply)
    }

[1m  # module.eks.aws_eks_node_group.private_node_group[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "private_node_group" {
      [32m+[0m[0m ami_type               = "AL2_x86_64"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "ON_DEMAND"
      [32m+[0m[0m cluster_name           = "dev-devsecops-cluster"
      [32m+[0m[0m disk_size              = 20
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t3.medium",
        ]
      [32m+[0m[0m labels                 = {
          [32m+[0m[0m "environment" = "dev"
          [32m+[0m[0m "nodegroup"   = "private"
        }
      [32m+[0m[0m node_group_name        = "dev-private-node-group"
      [32m+[0m[0m node_group_name_prefix = (known after apply)
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = [
          [32m+[0m[0m "subnet-09b918113ef119930",
          [32m+[0m[0m "subnet-09d1c1b3093f18a0c",
        ]
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version                = (known after apply)

      [32m+[0m[0m node_repair_config (known after apply)

      [32m+[0m[0m remote_access {
          [32m+[0m[0m ec2_ssh_key = "jenkins_server"
        }

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 1
          [32m+[0m[0m max_size     = 3
          [32m+[0m[0m min_size     = 1
        }

      [32m+[0m[0m update_config (known after apply)
    }

[1m  # module.eks.aws_eks_node_group.public_node_group[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "public_node_group" {
      [32m+[0m[0m ami_type               = "AL2_x86_64"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "ON_DEMAND"
      [32m+[0m[0m cluster_name           = "dev-devsecops-cluster"
      [32m+[0m[0m disk_size              = 20
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t3.medium",
        ]
      [32m+[0m[0m labels                 = {
          [32m+[0m[0m "environment" = "dev"
          [32m+[0m[0m "nodegroup"   = "public"
        }
      [32m+[0m[0m node_group_name        = "dev-public-node-group"
      [32m+[0m[0m node_group_name_prefix = (known after apply)
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = [
          [32m+[0m[0m "subnet-00d4239330c180d57",
          [32m+[0m[0m "subnet-02daa126407b94eff",
        ]
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version                = (known after apply)

      [32m+[0m[0m node_repair_config (known after apply)

      [32m+[0m[0m remote_access {
          [32m+[0m[0m ec2_ssh_key = "jenkins_server"
        }

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 2
          [32m+[0m[0m max_size     = 5
          [32m+[0m[0m min_size     = 1
        }

      [32m+[0m[0m taint {
          [32m+[0m[0m effect = "NO_SCHEDULE"
          [32m+[0m[0m key    = "public"
          [32m+[0m[0m value  = "true"
        }

      [32m+[0m[0m update_config (known after apply)
    }

[1m  # module.eks.aws_iam_role.nodes[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "nodes" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "dev-eks-node-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name" = "dev-eks-node-role"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name" = "dev-eks-node-role"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.nodes_AmazonEC2ContainerRegistryReadOnly[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "nodes_AmazonEC2ContainerRegistryReadOnly" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = "dev-eks-node-role"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.nodes_AmazonEKSWorkerNodePolicy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "nodes_AmazonEKSWorkerNodePolicy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = "dev-eks-node-role"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.nodes_AmazonEKS_CNI_Policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "nodes_AmazonEKS_CNI_Policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = "dev-eks-node-role"
    }

[1m  # module.eks.aws_security_group.eks_cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "eks_cluster" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for EKS cluster"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "Allow inbound traffic"
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m name                   = "dev-eks-cluster-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "dev-eks-cluster-sg"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "dev-eks-cluster-sg"
        }
      [32m+[0m[0m vpc_id                 = "vpc-0475da6c0045face1"
    }

[1m  # module.eks.module.eks.data.tls_certificate.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "tls_certificate" "this" {
      [32m+[0m[0m certificates = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m url          = (known after apply)
    }

[1m  # module.eks.module.eks.aws_cloudwatch_log_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/eks/dev-devsecops-cluster/cluster"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 90
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Name" = "/aws/eks/dev-devsecops-cluster/cluster"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Name" = "/aws/eks/dev-devsecops-cluster/cluster"
        }
    }

[1m  # module.eks.module.eks.aws_eks_cluster.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "this" {
      [32m+[0m[0m arn                           = (known after apply)
      [32m+[0m[0m bootstrap_self_managed_addons = true
      [32m+[0m[0m certificate_authority         = (known after apply)
      [32m+[0m[0m cluster_id                    = (known after apply)
      [32m+[0m[0m created_at                    = (known after apply)
      [32m+[0m[0m enabled_cluster_log_types     = [
          [32m+[0m[0m "api",
          [32m+[0m[0m "audit",
          [32m+[0m[0m "authenticator",
        ]
      [32m+[0m[0m endpoint                      = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m identity                      = (known after apply)
      [32m+[0m[0m name                          = "dev-devsecops-cluster"
      [32m+[0m[0m platform_version              = (known after apply)
      [32m+[0m[0m role_arn                      = (known after apply)
      [32m+[0m[0m status                        = (known after apply)
      [32m+[0m[0m tags                          = {
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m tags_all                      = {
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m version                       = "1.28"

      [32m+[0m[0m access_config {
          [32m+[0m[0m authentication_mode                         = "API_AND_CONFIG_MAP"
          [32m+[0m[0m bootstrap_cluster_creator_admin_permissions = false
        }

      [32m+[0m[0m encryption_config {
          [32m+[0m[0m resources = [
              [32m+[0m[0m "secrets",
            ]

          [32m+[0m[0m provider {
              [32m+[0m[0m key_arn = (known after apply)
            }
        }

      [32m+[0m[0m kubernetes_network_config {
          [32m+[0m[0m ip_family         = "ipv4"
          [32m+[0m[0m service_ipv4_cidr = (known after apply)
          [32m+[0m[0m service_ipv6_cidr = (known after apply)

          [32m+[0m[0m elastic_load_balancing (known after apply)
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m upgrade_policy (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = true
          [32m+[0m[0m endpoint_public_access    = false
          [32m+[0m[0m public_access_cidrs       = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m security_group_ids        = (known after apply)
          [32m+[0m[0m subnet_ids                = [
              [32m+[0m[0m "subnet-00d4239330c180d57",
              [32m+[0m[0m "subnet-02daa126407b94eff",
              [32m+[0m[0m "subnet-09b918113ef119930",
              [32m+[0m[0m "subnet-09d1c1b3093f18a0c",
            ]
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # module.eks.module.eks.aws_iam_openid_connect_provider.oidc_provider[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_openid_connect_provider" "oidc_provider" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m client_id_list  = [
          [32m+[0m[0m "sts.amazonaws.com",
        ]
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m tags            = {
          [32m+[0m[0m "Name" = "dev-devsecops-cluster-eks-irsa"
        }
      [32m+[0m[0m tags_all        = {
          [32m+[0m[0m "Name" = "dev-devsecops-cluster-eks-irsa"
        }
      [32m+[0m[0m thumbprint_list = (known after apply)
      [32m+[0m[0m url             = (known after apply)
    }

[1m  # module.eks.module.eks.aws_iam_policy.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "cluster_encryption" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Cluster encryption policy to allow cluster role to utilize CMK provided"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = "dev-devsecops-cluster-cluster-ClusterEncryption"
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.eks.module.eks.aws_iam_policy.custom[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "custom" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = "dev-devsecops-cluster-cluster-"
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:RunInstances",
                          [32m+[0m[0m "ec2:CreateLaunchTemplate",
                          [32m+[0m[0m "ec2:CreateFleet",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                          [32m+[0m[0m StringLike   = {
                              [32m+[0m[0m "aws:RequestTag/eks:kubernetes-node-class-name" = "*"
                              [32m+[0m[0m "aws:RequestTag/eks:kubernetes-node-pool-name"  = "*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "Compute"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:CreateVolume",
                          [32m+[0m[0m "ec2:CreateSnapshot",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "arn:aws:ec2:*:*:volume/*",
                          [32m+[0m[0m "arn:aws:ec2:*:*:snapshot/*",
                        ]
                      [32m+[0m[0m Sid       = "Storage"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:CreateNetworkInterface"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name"         = "${aws:PrincipalTag/eks:eks-cluster-name}"
                              [32m+[0m[0m "aws:RequestTag/eks:kubernetes-cni-node-name" = "*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "Networking"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:CreateTargetGroup",
                          [32m+[0m[0m "elasticloadbalancing:CreateRule",
                          [32m+[0m[0m "elasticloadbalancing:CreateLoadBalancer",
                          [32m+[0m[0m "elasticloadbalancing:CreateListener",
                          [32m+[0m[0m "ec2:CreateSecurityGroup",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "LoadBalancer"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "shield:CreateProtection"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "ShieldProtection"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "shield:TagResource"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "arn:aws:shield::*:protection/*"
                      [32m+[0m[0m Sid       = "ShieldTagResource"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.eks.module.eks.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:TagSession",
                          [32m+[0m[0m "sts:AssumeRole",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSClusterAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "dev-devsecops-cluster-cluster-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.module.eks.aws_iam_role_policy_attachment.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_encryption" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks.aws_iam_role_policy_attachment.custom[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "custom" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks.aws_security_group.cluster[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "cluster" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS cluster security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "dev-devsecops-cluster-cluster-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "dev-devsecops-cluster-cluster"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "dev-devsecops-cluster-cluster"
        }
      [32m+[0m[0m vpc_id                 = "vpc-0475da6c0045face1"
    }

[1m  # module.eks.module.eks.aws_security_group.node[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "node" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS node shared security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "dev-devsecops-cluster-node-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"                                        = "dev-devsecops-cluster-node"
          [32m+[0m[0m "kubernetes.io/cluster/dev-devsecops-cluster" = "owned"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"                                        = "dev-devsecops-cluster-node"
          [32m+[0m[0m "kubernetes.io/cluster/dev-devsecops-cluster" = "owned"
        }
      [32m+[0m[0m vpc_id                 = "vpc-0475da6c0045face1"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.cluster["ingress_nodes_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "cluster" {
      [32m+[0m[0m description              = "Node groups to cluster API"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["egress_all"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "Allow all egress"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["ingress_cluster_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node groups"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 4443/tcp webhook"
      [32m+[0m[0m from_port                = 4443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 4443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 6443/tcp webhook"
      [32m+[0m[0m from_port                = 6443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 6443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 8443/tcp webhook"
      [32m+[0m[0m from_port                = 8443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 8443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 9443/tcp webhook"
      [32m+[0m[0m from_port                = 9443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 9443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node kubelets"
      [32m+[0m[0m from_port                = 10250
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 10250
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node ingress on ephemeral ports"
      [32m+[0m[0m from_port                = 1025
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 65535
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS UDP"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "udp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.module.eks.time_sleep.this[0][0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "this" {
      [32m+[0m[0m create_duration = "30s"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m triggers        = {
          [32m+[0m[0m "cluster_certificate_authority_data" = (known after apply)
          [32m+[0m[0m "cluster_endpoint"                   = (known after apply)
          [32m+[0m[0m "cluster_name"                       = (known after apply)
          [32m+[0m[0m "cluster_service_cidr"               = (known after apply)
          [32m+[0m[0m "cluster_version"                    = "1.28"
        }
    }

[1m  # module.eks.module.eks.module.kms.data.aws_iam_policy_document.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this" {
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m json                      = (known after apply)
      [32m+[0m[0m minified_json             = (known after apply)
      [32m+[0m[0m override_policy_documents = []
      [32m+[0m[0m source_policy_documents   = []

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "Default"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::148761635167:root",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:CancelKeyDeletion",
              [32m+[0m[0m "kms:Create*",
              [32m+[0m[0m "kms:Delete*",
              [32m+[0m[0m "kms:Describe*",
              [32m+[0m[0m "kms:Disable*",
              [32m+[0m[0m "kms:Enable*",
              [32m+[0m[0m "kms:Get*",
              [32m+[0m[0m "kms:ImportKeyMaterial",
              [32m+[0m[0m "kms:List*",
              [32m+[0m[0m "kms:Put*",
              [32m+[0m[0m "kms:ReplicateKey",
              [32m+[0m[0m "kms:Revoke*",
              [32m+[0m[0m "kms:ScheduleKeyDeletion",
              [32m+[0m[0m "kms:TagResource",
              [32m+[0m[0m "kms:UntagResource",
              [32m+[0m[0m "kms:Update*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyAdministration"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::148761635167:user/webadmin",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:Decrypt",
              [32m+[0m[0m "kms:DescribeKey",
              [32m+[0m[0m "kms:Encrypt",
              [32m+[0m[0m "kms:GenerateDataKey*",
              [32m+[0m[0m "kms:ReEncrypt*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyUsage"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
    }

[1m  # module.eks.module.eks.module.kms.aws_kms_alias.this["cluster"][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/eks/dev-devsecops-cluster"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.eks.module.eks.module.kms.aws_kms_key.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "this" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m description                        = "dev-devsecops-cluster cluster encryption key"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = false
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m rotation_period_in_days            = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
    }

[1mPlan:[0m 39 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m eks_cluster_name = "devsecops-cluster"
[0m[1mmodule.eks.module.eks.aws_cloudwatch_log_group.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_security_group.node[0]: Creating...[0m[0m
[0m[1maws_security_group_rule.allow_vpc_endpoint_jenkins: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_security_group.cluster[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_iam_policy.custom[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_role.nodes: Creating...[0m[0m
[0m[1maws_vpc_endpoint.sts: Creating...[0m[0m
[0m[1maws_vpc_endpoint.ec2: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group.eks_cluster: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_iam_role.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_cloudwatch_log_group.this[0]: Creation complete after 0s [id=/aws/eks/dev-devsecops-cluster/cluster][0m
[0m[1maws_security_group_rule.jenkins_to_eks: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_iam_policy.custom[0]: Creation complete after 0s [id=arn:aws:iam::148761635167:policy/dev-devsecops-cluster-cluster-20250717013028743800000002][0m
[0m[1mmodule.eks.module.eks.aws_iam_role.this[0]: Creation complete after 0s [id=dev-devsecops-cluster-cluster-20250717013028762100000006][0m
[0m[1mmodule.eks.module.eks.aws_iam_role_policy_attachment.custom[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_role.nodes: Creation complete after 0s [id=dev-eks-node-role][0m
[0m[1mmodule.eks.module.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_iam_role_policy_attachment.custom[0]: Creation complete after 0s [id=dev-devsecops-cluster-cluster-20250717013028762100000006-20250717013028997700000008][0m
[0m[1mmodule.eks.module.eks.module.kms.data.aws_iam_policy_document.this[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"]: Creation complete after 0s [id=dev-devsecops-cluster-cluster-20250717013028762100000006-20250717013028988900000007][0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.nodes_AmazonEKS_CNI_Policy: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.module.kms.data.aws_iam_policy_document.this[0]: Read complete after 0s [id=3044279827][0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.nodes_AmazonEC2ContainerRegistryReadOnly: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"]: Creation complete after 0s [id=dev-devsecops-cluster-cluster-20250717013028762100000006-20250717013029023800000009][0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.nodes_AmazonEKSWorkerNodePolicy: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.nodes_AmazonEKS_CNI_Policy: Creation complete after 0s [id=dev-eks-node-role-2025071701302909840000000a][0m
[0m[1maws_security_group_rule.allow_vpc_endpoint_jenkins: Creation complete after 0s [id=sgrule-4156799900][0m
[0m[1mmodule.eks.module.eks.module.kms.aws_kms_key.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.nodes_AmazonEC2ContainerRegistryReadOnly: Creation complete after 0s [id=dev-eks-node-role-2025071701302910980000000b][0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.nodes_AmazonEKSWorkerNodePolicy: Creation complete after 0s [id=dev-eks-node-role-2025071701302912410000000c][0m
[0m[1maws_security_group_rule.jenkins_to_eks: Creation complete after 0s [id=sgrule-1252713][0m
[0m[1mmodule.eks.module.eks.aws_security_group.node[0]: Creation complete after 1s [id=sg-0045a78c013693041][0m
[0m[1mmodule.eks.module.eks.aws_security_group.cluster[0]: Creation complete after 1s [id=sg-08126ec2ef9f5cdf1][0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.cluster["ingress_nodes_443"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group.eks_cluster: Creation complete after 1s [id=sg-0a4f65dc81f52fed5][0m
[0m[1maws_security_group_rule.allow_jenkins_to_eks: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["egress_all"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["ingress_cluster_443"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.cluster["ingress_nodes_443"]: Creation complete after 0s [id=sgrule-3052064266][0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"]: Creating...[0m[0m
[0m[1maws_security_group_rule.allow_jenkins_to_eks: Creation complete after 1s [id=sgrule-1398179128][0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"]: Creation complete after 1s [id=sgrule-2401574726][0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["egress_all"]: Creation complete after 1s [id=sgrule-1487247137][0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"]: Creation complete after 1s [id=sgrule-1429947633][0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"]: Creation complete after 2s [id=sgrule-1181186256][0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["ingress_cluster_443"]: Creation complete after 2s [id=sgrule-1378232068][0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"]: Creation complete after 3s [id=sgrule-3725492434][0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"]: Creation complete after 2s [id=sgrule-629964085][0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"]: Creation complete after 2s [id=sgrule-2178146010][0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"]: Creation complete after 3s [id=sgrule-832206650][0m
[0m[1mmodule.eks.module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"]: Creation complete after 2s [id=sgrule-3251232555][0m
[0m[1maws_vpc_endpoint.sts: Still creating... [00m10s elapsed][0m[0m
[0m[1maws_vpc_endpoint.ec2: Still creating... [00m10s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.module.kms.aws_kms_key.this[0]: Still creating... [00m10s elapsed][0m[0m
[0m[1maws_vpc_endpoint.sts: Still creating... [00m20s elapsed][0m[0m
[0m[1maws_vpc_endpoint.ec2: Still creating... [00m20s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.module.kms.aws_kms_key.this[0]: Still creating... [00m20s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.module.kms.aws_kms_key.this[0]: Creation complete after 21s [id=8b322a24-31f9-472f-8597-91a193b44099][0m
[0m[1mmodule.eks.module.eks.module.kms.aws_kms_alias.this["cluster"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_iam_policy.cluster_encryption[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_iam_policy.cluster_encryption[0]: Creation complete after 0s [id=arn:aws:iam::148761635167:policy/dev-devsecops-cluster-cluster-ClusterEncryption2025071701305007440000000d][0m
[0m[1mmodule.eks.module.eks.aws_iam_role_policy_attachment.cluster_encryption[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_iam_role_policy_attachment.cluster_encryption[0]: Creation complete after 0s [id=dev-devsecops-cluster-cluster-20250717013028762100000006-2025071701305027610000000e][0m
[0m[1mmodule.eks.module.eks.module.kms.aws_kms_alias.this["cluster"]: Creation complete after 1s [id=alias/eks/dev-devsecops-cluster][0m
[0m[1maws_vpc_endpoint.sts: Still creating... [00m30s elapsed][0m[0m
[0m[1maws_vpc_endpoint.ec2: Still creating... [00m30s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [00m10s elapsed][0m[0m
[0m[1maws_vpc_endpoint.sts: Creation complete after 32s [id=vpce-02dce53e57c743f5e][0m
[0m[1maws_vpc_endpoint.ec2: Still creating... [00m40s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [00m20s elapsed][0m[0m
[0m[1maws_vpc_endpoint.ec2: Creation complete after 42s [id=vpce-00c2c402e82e24611][0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [00m30s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [00m40s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [00m50s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [01m00s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [01m10s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [01m20s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [01m30s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [01m40s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [01m50s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [02m00s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [02m10s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [02m20s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [02m30s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [02m40s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [02m50s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [03m00s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [03m10s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [03m20s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [03m30s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [03m40s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [03m50s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [04m00s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [04m10s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [04m20s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [04m30s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [04m40s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [04m50s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [05m00s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [05m10s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [05m20s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [05m30s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [05m40s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [05m50s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [06m00s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [06m10s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [06m20s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [06m30s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [06m40s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [06m50s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [07m00s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [07m10s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [07m20s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [07m30s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [07m40s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [07m50s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [08m00s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [08m10s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [08m20s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [08m30s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [08m40s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [08m50s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [09m00s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [09m10s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [09m20s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [09m30s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [09m40s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Still creating... [09m50s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.aws_eks_cluster.this[0]: Creation complete after 9m54s [id=dev-devsecops-cluster][0m
[0m[1mmodule.eks.module.eks.data.tls_certificate.this[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks.time_sleep.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.data.tls_certificate.this[0]: Read complete after 0s [id=922877a0975ad078a65b8ff11ebc47b8311945c7][0m
[0m[1mmodule.eks.module.eks.aws_iam_openid_connect_provider.oidc_provider[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks.aws_iam_openid_connect_provider.oidc_provider[0]: Creation complete after 0s [id=arn:aws:iam::148761635167:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/36D172A7E5263AAF8B5A92D0A573DFE6][0m
[0m[1mmodule.eks.module.eks.time_sleep.this[0]: Still creating... [00m10s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.time_sleep.this[0]: Still creating... [00m20s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.time_sleep.this[0]: Still creating... [00m30s elapsed][0m[0m
[0m[1mmodule.eks.module.eks.time_sleep.this[0]: Creation complete after 30s [id=2025-07-17T01:41:13Z][0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Creating...[0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Creating...[0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [00m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Still creating... [00m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Still creating... [00m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [00m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [00m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Still creating... [00m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Still creating... [00m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [00m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [00m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Still creating... [00m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Still creating... [01m00s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [01m00s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [01m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Still creating... [01m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [01m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Still creating... [01m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [01m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Still creating... [01m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Still creating... [01m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [01m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [01m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Still creating... [01m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Still creating... [02m00s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [02m00s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [02m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Still creating... [02m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [02m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Still creating... [02m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Still creating... [02m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [02m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Still creating... [02m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [02m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [02m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Still creating... [02m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Still creating... [03m00s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [03m00s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.private_node_group: Creation complete after 3m7s [id=dev-devsecops-cluster:dev-private-node-group][0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [03m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [03m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Still creating... [03m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_node_group.public_node_group: Creation complete after 3m39s [id=dev-devsecops-cluster:dev-public-node-group][0m
[0m[1maws_vpc_endpoint.eks: Creating...[0m[0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mcreating EC2 VPC Endpoint (com.amazonaws.us-east-1.eks): operation error EC2: CreateVpcEndpoint, https response error StatusCode: 400, RequestID: e30ad728-8ffa-4121-9907-84da6bacab82, api error InvalidParameter: Enabling private DNS requires both enableDnsSupport and enableDnsHostnames VPC attributes set to true for vpc-0475da6c0045face1[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with aws_vpc_endpoint.eks,
[31m│[0m [0m  on main.tf line 58, in resource "aws_vpc_endpoint" "eks":
[31m│[0m [0m  58: resource "aws_vpc_endpoint" "eks" [4m{[0m[0m
[31m│[0m [0m
[31m╵[0m[0m
[Pipeline] }
[Pipeline] // withAWS
[Pipeline] }
[Pipeline] // dir
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Configure Kubernetes Access)
Stage "Configure Kubernetes Access" skipped due to earlier failure(s)
[Pipeline] getContext
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Deploy Application)
Stage "Deploy Application" skipped due to earlier failure(s)
[Pipeline] getContext
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Stress Testing)
Stage "Stress Testing" skipped due to earlier failure(s)
[Pipeline] getContext
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Verify Deployment)
Stage "Verify Deployment" skipped due to earlier failure(s)
[Pipeline] getContext
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Declarative: Post Actions)
[Pipeline] cleanWs
[WS-CLEANUP] Deleting project workspace...
[WS-CLEANUP] Deferred wipeout is used...
[WS-CLEANUP] done
[Pipeline] echo
❌ Pipeline FAILED: flask-app-deployment #1
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
ERROR: script returned exit code 1
Finished: FAILURE